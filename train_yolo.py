# train_yolo.py
from ultralytics import YOLO
import torch
import os


def train_gost_detector():
    """
    –û–±—É—á–µ–Ω–∏–µ YOLOv8 –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ—à–∏–±–æ–∫ –ì–û–°–¢
    """
    print("\n" + "=" * 60)
    print("üß† –û–ë–£–ß–ï–ù–ò–ï YOLO –î–õ–Ø –î–ï–¢–ï–ö–¶–ò–ò –û–®–ò–ë–û–ö –ì–û–°–¢")
    print("=" * 60 + "\n")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ data.yaml
    if not os.path.exists('data.yaml'):
        print("‚ùå –§–∞–π–ª data.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ data.yaml —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –¥–∞—Ç–∞—Å–µ—Ç–∞")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º GPU
    device = 'cuda' if torch.cuda.is_available() else 'cpu'
    print(f"üñ•Ô∏è  –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")

    if device == 'cpu':
        print("‚ö†Ô∏è  GPU –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –æ–±—É—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—ã–º")
        print("üí° –î–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Google Colab —Å GPU\n")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ YOLOv8...")
    model = YOLO('yolov8n.pt')  # nano - —Å–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è

    print("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ...\n")

    # –û–±—É—á–∞–µ–º
    results = model.train(
        data='data.yaml',
        epochs=50,  # –î–ª—è –Ω–∞—á–∞–ª–∞ 50 —ç–ø–æ—Ö (–º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ 100)
        imgsz=640,  # –†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        batch=8,  # Batch size (—É–º–µ–Ω—å—à–∏—Ç–µ –¥–æ 4 –µ—Å–ª–∏ –º–∞–ª–æ RAM)
        patience=15,  # Early stopping –ø–æ—Å–ª–µ 15 —ç–ø–æ—Ö –±–µ–∑ —É–ª—É—á—à–µ–Ω–∏—è
        device=device,

        # –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ (–ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è —á–µ—Ä—Ç–µ–∂–µ–π)
        hsv_h=0.0,  # –û—Ç–∫–ª—é—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
        hsv_s=0.0,
        hsv_v=0.0,
        degrees=0.0,  # –ù–µ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —á–µ—Ä—Ç–µ–∂–∏
        translate=0.1,  # –ù–µ–±–æ–ª—å—à–∏–µ —Å–¥–≤–∏–≥–∏
        scale=0.1,  # –ù–µ–±–æ–ª—å—à–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        flipud=0.0,  # –ù–µ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
        fliplr=0.0,
        mosaic=0.5,  # –ú–æ–∑–∞–∏–∫–∞

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        project='runs/gost_detector',
        name='exp',
        exist_ok=True,
        save=True,
        save_period=10,  # –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–∞–∂–¥—ã–µ 10 —ç–ø–æ—Ö

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        plots=True,
        verbose=True
    )

    print("\n" + "=" * 60)
    print("‚úÖ –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("=" * 60)
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results.save_dir}")
    print(f"üéØ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {results.save_dir}/weights/best.pt")
    print("=" * 60 + "\n")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ
    print("üìä –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏...\n")
    metrics = model.val()

    print("\n" + "=" * 60)
    print("üìà –ú–ï–¢–†–ò–ö–ò:")
    print("=" * 60)
    print(f"mAP50: {metrics.box.map50:.3f}")
    print(f"mAP50-95: {metrics.box.map:.3f}")
    print("=" * 60 + "\n")

    # –ö–æ–ø–∏—Ä—É–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å –≤ –ø–∞–ø–∫—É models
    import shutil
    os.makedirs('models', exist_ok=True)
    best_model_path = f"{results.save_dir}/weights/best.pt"
    shutil.copy(best_model_path, 'models/best.pt')
    print(f"‚úÖ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤: models/best.pt\n")

    return results


if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç–∞—Å–µ—Ç
    if not os.path.exists('data/dataset/train'):
        print("‚ùå –î–∞—Ç–∞—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("   1. python generate_dataset.py")
        print("   2. python split_dataset.py\n")
        exit(1)

    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    train_imgs = len([f for f in os.listdir('data/dataset/train/images') if f.endswith('.png')])
    val_imgs = len([f for f in os.listdir('data/dataset/val/images') if f.endswith('.png')])

    print(f"\nüìä –î–∞—Ç–∞—Å–µ—Ç:")
    print(f"   Train: {train_imgs} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print(f"   Val: {val_imgs} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print(f"   –í—Å–µ–≥–æ: {train_imgs + val_imgs}\n")

    response = input("‚ùì –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ? (y/n): ")

    if response.lower() not in ['y', 'yes', '–¥', '–¥–∞']:
        print("‚è≠Ô∏è  –û—Ç–º–µ–Ω–µ–Ω–æ")
        exit(0)

    train_gost_detector()