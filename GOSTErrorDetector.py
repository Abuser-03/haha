# GOSTErrorDetector.py
import cv2
import numpy as np
from ultralytics import YOLO
import os


class GOSTErrorDetector:
    def __init__(self, model_path='models/best.pt'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ —Å –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é
        """
        if not os.path.exists(model_path):
            raise FileNotFoundError(
                f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}\n"
                f"üí° –û–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –∫–æ–º–∞–Ω–¥–æ–π: python train_yolo.py"
            )

        print(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏: {model_path}")
        self.model = YOLO(model_path)

        # –ú–∞–ø–∏–Ω–≥ –∫–ª–∞—Å—Å–æ–≤
        self.class_to_error = {
            0: {'type': 'missing_stamp', 'severity': 'critical',
                'description': '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å'},
            1: {'type': 'wrong_document_code', 'severity': 'high',
                'description': '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞'},
            2: {'type': 'code_name_mismatch', 'severity': 'high',
                'description': '–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–¥–∞ –∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è'},
            3: {'type': 'wrong_tt_position', 'severity': 'medium',
                'description': '–¢–¢ –Ω–µ –Ω–∞–¥ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–¥–ø–∏—Å—å—é'},
            4: {'type': 'missing_letter_designation', 'severity': 'medium',
                'description': '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±—É–∫–≤–µ–Ω–Ω–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ'},
            5: {'type': 'missing_asterisks', 'severity': 'low',
                'description': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç * –Ω–∞ —á–µ—Ä—Ç–µ–∂–µ'},
            6: {'type': 'dimension_30deg_violation', 'severity': 'medium',
                'description': '–†–∞–∑–º–µ—Ä –≤ –∑–æ–Ω–µ 30¬∞ –±–µ–∑ –ø–æ–ª–∫–∏'},
            7: {'type': 'missing_tolerance_arrow', 'severity': 'high',
                'description': '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä–µ–ª–∫–∞ –≤ –¥–æ–ø—É—Å–∫–µ'},
            8: {'type': 'missing_general_roughness', 'severity': 'medium',
                'description': '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚àö –≤ —É–≥–ª—É —á–µ—Ä—Ç–µ–∂–∞'}
        }

    def detect_errors(self, image_path, conf_threshold=0.25):
        """
        –î–µ—Ç–µ–∫—Ü–∏—è –æ—à–∏–±–æ–∫ –Ω–∞ —á–µ—Ä—Ç–µ–∂–µ

        Args:
            image_path: –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            conf_threshold: –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (0.0-1.0)

        Returns:
            list: —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
        """
        print(f"üîç –ê–Ω–∞–ª–∏–∑: {os.path.basename(image_path)}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º inference
        results = self.model(image_path, conf=conf_threshold, verbose=False)[0]

        errors = []
        for box in results.boxes:
            class_id = int(box.cls[0])
            confidence = float(box.conf[0])
            bbox = box.xyxy[0].tolist()  # [x1, y1, x2, y2]

            error_info = self.class_to_error.get(class_id, {})

            errors.append({
                'type': error_info.get('type', 'unknown'),
                'severity': error_info.get('severity', 'medium'),
                'description': error_info.get('description', ''),
                'confidence': round(confidence, 3),
                'bbox': {
                    'x': int(bbox[0]),
                    'y': int(bbox[1]),
                    'width': int(bbox[2] - bbox[0]),
                    'height': int(bbox[3] - bbox[1])
                },
                'location': 'drawing'
            })

        print(f"   –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(errors)}")
        return errors

    def visualize_errors(self, image_path, output_path='result.png', conf_threshold=0.25):
        """
        –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
        """
        results = self.model(image_path, conf=conf_threshold)[0]
        annotated = results.plot()  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è
        cv2.imwrite(output_path, annotated)
        print(f"‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_path}")
        return output_path


# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == '__main__':
    import sys

    if not os.path.exists('models/best.pt'):
        print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("üí° –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å: python train_yolo.py")
        sys.exit(1)

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä
    detector = GOSTErrorDetector()

    # –ù–∞–π–¥—ë–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    test_images = [
        'data/dataset/val/images',
        'data/generated_errors/images'
    ]

    test_img = None
    for folder in test_images:
        if os.path.exists(folder):
            imgs = [f for f in os.listdir(folder) if f.endswith('.png')]
            if imgs:
                test_img = os.path.join(folder, imgs[0])
                break

    if test_img:
        print(f"\nüß™ –¢–µ—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏: {test_img}\n")
        errors = detector.detect_errors(test_img, conf_threshold=0.3)

        if errors:
            print(f"\n‚ùå –ù–∞–π–¥–µ–Ω–æ {len(errors)} –æ—à–∏–±–æ–∫:")
            for i, err in enumerate(errors, 1):
                print(f"   {i}. {err['type']} ({err['severity']}) - —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {err['confidence']:.1%}")
        else:
            print("\n‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        detector.visualize_errors(test_img, 'test_result.png')
    else:
        print("‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")