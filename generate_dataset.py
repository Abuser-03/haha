
import os
import json
from GOSTErrorGenerator import GOSTErrorGenerator
from tqdm import tqdm
import random
import shutil


def generate_balanced_dataset(clean_images_folder, output_folder,
                              errors_per_variant=2, variants_per_image=1):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç:
    - 50% –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–±–µ–∑ –æ—à–∏–±–æ–∫)
    - 50% –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏
    """
    os.makedirs(f"{output_folder}/images", exist_ok=True)
    os.makedirs(f"{output_folder}/labels", exist_ok=True)

    clean_images = [f for f in os.listdir(clean_images_folder) if f.endswith('.png')]

    if not clean_images:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ PNG —Ñ–∞–π–ª–æ–≤ –≤", clean_images_folder)
        return

    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(clean_images)} –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print(f"üìã –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç:\n")

    # –ú–∞–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫ –≤ –∫–ª–∞—Å—Å—ã YOLO
    error_to_class = {
        'missing_stamp': 0,
        'wrong_document_code': 1,
        'code_name_mismatch': 2,
        'wrong_tt_position': 3,
        'missing_letter_designation': 4,
        'missing_asterisks': 5,
        'dimension_30deg_violation': 6,
        'missing_tolerance_arrow': 7,
        'missing_general_roughness': 8
    }

    annotations = []
    stats = {
        'clean': 0,
        'with_errors': 0,
        'total_errors': 0,
        'errors_by_type': {k: 0 for k in error_to_class.keys()}
    }

    # ========== 1. –ö–û–ü–ò–†–£–ï–ú –ö–û–†–†–ï–ö–¢–ù–´–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø (50%) ==========
    print("=" * 60)
    print("1Ô∏è‚É£  –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –ö–û–†–†–ï–ö–¢–ù–´–• –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô (–±–µ–∑ –æ—à–∏–±–æ–∫)")
    print("=" * 60)

    for img_name in tqdm(clean_images, desc="–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ"):
        img_path = os.path.join(clean_images_folder, img_name)

        # –ö–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∫–∞–∫ –µ—Å—Ç—å
        output_name = f"clean_{img_name}"
        output_path = os.path.join(output_folder, 'images', output_name)
        shutil.copy2(img_path, output_path)

        # –°–æ–∑–¥–∞—ë–º –ü–£–°–¢–£–Æ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é (–Ω–µ—Ç –æ—à–∏–±–æ–∫ = –ø—É—Å—Ç–æ–π .txt —Ñ–∞–π–ª)
        label_path = os.path.join(output_folder, 'labels', f"{output_name[:-4]}.txt")
        open(label_path, 'w').close()  # –ü—É—Å—Ç–æ–π —Ñ–∞–π–ª

        annotations.append({
            'image': output_name,
            'errors': [],
            'is_clean': True
        })

        stats['clean'] += 1

    print(f"\n‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {stats['clean']} –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n")

    # ========== 2. –ì–ï–ù–ï–†–ò–†–£–ï–ú –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –° –û–®–ò–ë–ö–ê–ú–ò (50%) ==========
    print("=" * 60)
    print("2Ô∏è‚É£  –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –° –û–®–ò–ë–ö–ê–ú–ò")
    print("=" * 60)

    for img_name in tqdm(clean_images, desc="–° –æ—à–∏–±–∫–∞–º–∏"):
        img_path = os.path.join(clean_images_folder, img_name)

        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
        for variant in range(variants_per_image):
            try:
                generator = GOSTErrorGenerator(img_path)

                # –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫
                error_methods = [
                    ('remove_stamp', generator.remove_stamp),
                    ('corrupt_document_code', generator.corrupt_document_code),
                    ('misplace_technical_requirements', generator.misplace_technical_requirements),
                    ('remove_letter_designation', generator.remove_letter_designation),
                    ('remove_asterisk', generator.remove_asterisk),
                    ('create_30deg_violation', generator.create_30deg_violation),
                    ('remove_tolerance_arrow', generator.remove_tolerance_arrow),
                    ('remove_general_roughness_mark', generator.remove_general_roughness_mark)
                ]

                # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º 1-3 —Ç–∏–ø–∞ –æ—à–∏–±–æ–∫
                num_errors = random.randint(1, min(errors_per_variant, len(error_methods)))
                selected_errors = random.sample(error_methods, num_errors)

                image_annotations = []
                output_name = f"error_{img_name[:-4]}_v{variant}.png"

                # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
                for error_name, error_func in selected_errors:
                    error_info = error_func()

                    if error_info:
                        image_annotations.append({
                            'class': error_to_class.get(error_info['type'], 0),
                            'bbox': error_info['bbox'],
                            'type': error_info['type'],
                            'severity': error_info['severity']
                        })

                        stats['total_errors'] += 1
                        stats['errors_by_type'][error_info['type']] += 1

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                output_path = os.path.join(output_folder, 'images', output_name)
                generator.save(output_path)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º YOLO-–∞–Ω–Ω–æ—Ç–∞—Ü–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏)
                if image_annotations:
                    save_yolo_annotation(
                        image_annotations,
                        generator.width,
                        generator.height,
                        os.path.join(output_folder, 'labels', f"{output_name[:-4]}.txt")
                    )

                    annotations.append({
                        'image': output_name,
                        'errors': image_annotations,
                        'is_clean': False
                    })

                    stats['with_errors'] += 1
                else:
                    # –ï—Å–ª–∏ –æ—à–∏–±–∫–∏ –Ω–µ —Å–æ–∑–¥–∞–ª–∏—Å—å, —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π .txt
                    label_path = os.path.join(output_folder, 'labels', f"{output_name[:-4]}.txt")
                    open(label_path, 'w').close()

            except Exception as e:
                print(f"\n‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {img_name}: {e}")
                continue

    # ========== 3. –°–û–•–†–ê–ù–Ø–ï–ú –û–ë–©–£–Æ –°–¢–ê–¢–ò–°–¢–ò–ö–£ ==========
    print(f"\n{'=' * 60}")
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ê–¢–ê–°–ï–¢–ê")
    print("=" * 60)
    print(f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {stats['clean']}")
    print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏: {stats['with_errors']}")
    print(f"üìà –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {stats['clean'] + stats['with_errors']}")
    print(f"üîç –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {stats['total_errors']}")
    print(f"\nüìã –û—à–∏–±–∫–∏ –ø–æ —Ç–∏–ø–∞–º:")
    for error_type, count in sorted(stats['errors_by_type'].items(), key=lambda x: -x[1]):
        if count > 0:
            print(f"   ‚Ä¢ {error_type}: {count}")
    print("=" * 60)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏
    with open(f"{output_folder}/annotations.json", 'w', encoding='utf-8') as f:
        json.dump({
            'statistics': stats,
            'annotations': annotations
        }, f, ensure_ascii=False, indent=2)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
    with open(f"{output_folder}/dataset_stats.txt", 'w', encoding='utf-8') as f:
        f.write("=" * 60 + "\n")
        f.write("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ê–¢–ê–°–ï–¢–ê\n")
        f.write("=" * 60 + "\n")
        f.write(f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {stats['clean']}\n")
        f.write(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏: {stats['with_errors']}\n")
        f.write(f"–í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {stats['clean'] + stats['with_errors']}\n")
        f.write(f"–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {stats['total_errors']}\n")
        f.write(f"\n–û—à–∏–±–∫–∏ –ø–æ —Ç–∏–ø–∞–º:\n")
        for error_type, count in sorted(stats['errors_by_type'].items(), key=lambda x: -x[1]):
            if count > 0:
                f.write(f"  {error_type}: {count}\n")

    print(f"\n‚úÖ –î–∞—Ç–∞—Å–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {output_folder}")
    print(f"üìÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {output_folder}/dataset_stats.txt")
    print(f"üìÑ –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏: {output_folder}/annotations.json\n")

    return annotations


def save_yolo_annotation(annotations, img_width, img_height, output_path):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ YOLO:
    <class_id> <x_center> <y_center> <width> <height> (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ 0-1)
    """
    with open(output_path, 'w') as f:
        for ann in annotations:
            class_id = ann['class']
            bbox = ann['bbox']

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º [x, y, w, h] ‚Üí –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞
            x_center = (bbox[0] + bbox[2] / 2) / img_width
            y_center = (bbox[1] + bbox[3] / 2) / img_height
            width = bbox[2] / img_width
            height = bbox[3] / img_height

            # YOLO —Ñ–æ—Ä–º–∞—Ç: class x_center y_center width height
            f.write(f"{class_id} {x_center:.6f} {y_center:.6f} {width:.6f} {height:.6f}\n")


if __name__ == '__main__':
    print("\n" + "=" * 60)
    print("üé® –ì–ï–ù–ï–†–ê–¢–û–† –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–û–ì–û –î–ê–¢–ê–°–ï–¢–ê")
    print("=" * 60 + "\n")

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    CLEAN_IMAGES = './data/original_clean'
    OUTPUT_FOLDER = './data/generated_errors'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if not os.path.exists(CLEAN_IMAGES):
        print(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {CLEAN_IMAGES}")
        print(f"üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç—É–¥–∞ PNG —á–µ—Ä—Ç–µ–∂–∏")
        exit(1)

    num_images = len([f for f in os.listdir(CLEAN_IMAGES) if f.endswith('.png')])

    if num_images == 0:
        print(f"‚ùå –í –ø–∞–ø–∫–µ {CLEAN_IMAGES} –Ω–µ—Ç PNG —Ñ–∞–π–ª–æ–≤")
        exit(1)

    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {num_images}")
    print(f"üìä –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ:")
    print(f"   ‚Ä¢ {num_images} –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö (–±–µ–∑ –æ—à–∏–±–æ–∫)")
    print(f"   ‚Ä¢ {num_images} —Å –æ—à–∏–±–∫–∞–º–∏ (1-3 –æ—à–∏–±–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)")
    print(f"   ‚Ä¢ –ò—Ç–æ–≥–æ: ~{num_images * 2} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n")

    response = input("‚ùì –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é? (y/n): ")

    if response.lower() not in ['y', 'yes', '–¥', '–¥–∞']:
        print("‚è≠Ô∏è  –û—Ç–º–µ–Ω–µ–Ω–æ")
        exit(0)

    print("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...\n")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç–∞—Å–µ—Ç
    generate_balanced_dataset(
        clean_images_folder=CLEAN_IMAGES,
        output_folder=OUTPUT_FOLDER,
        errors_per_variant=2,  # 1-2 –æ—à–∏–±–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        variants_per_image=1  # 1 –≤–∞—Ä–∏–∞–Ω—Ç = –±—É–¥–µ—Ç 80 –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö + 80 —Å –æ—à–∏–±–∫–∞–º–∏ = 160 –≤—Å–µ–≥–æ
    )

    print("\n" + "=" * 60)
    print("üéâ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 60)
    print(f"\nüìã –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:")
    print(f"   python split_dataset.py")
    print("=" * 60 + "\n")